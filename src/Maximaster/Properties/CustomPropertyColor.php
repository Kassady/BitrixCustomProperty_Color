<?phpnamespace Maximaster\Properties;use Bitrix\Main\Localization\Loc;Loc::loadMessages(__FILE__);class CustomPropertyColor extends CUserTypeString{    /**     * Получение описания пользовательского свойства     * @return array     */    public function getDescription()    {        static::initJsConfig();        CUtil::InitJSCore(['jscolor_core', 'jscolor_install']);        return [            //для пользовательских полей            //*начало*            "USER_TYPE_ID"          => "Color",            "CLASS_NAME"            => "CustomPropertyColor",            "BASE_TYPE"             => "string",            //*конец*            "DESCRIPTION"           => Loc::getMessage('CUSTOM_PROPERTY_COLOR:DESCRIPTION'),            'USER_TYPE'             => 'Color',            'PROPERTY_TYPE'         => 'S',            'GetAdminListEditHTML'  => [static::class, 'getAdminListEditHTML'],            'GetAdminListViewHTML'  => [static::class, 'getAdminListViewHTML'],            'GetEditFormHTML'       => [static::class, 'getEditFormHTML'],            'GetPropertyFieldHtml'  => [static::class, 'getPropertyFieldHtml'],            'GetAdminFilterHTML'    => [static::class, 'getAdminFilterHTML'],            'GetFilterHTML'         => [static::class, 'getFilterHTML'],            'PrepareSettings'       => [static::class, 'prepareSettings'],            'GetSettingsHTML'       => [static::class, 'getSettingsHTML'],            'ConvertToDB'           => [static::class, 'convertToDB'],            'ConvertFromDB'         => [static::class, 'convertFromDB']        ];    }    /**     * Регистрация JS для последующего подключения     */    protected function initJsConfig()    {        $arJsConfig = [            'jscolor_core' => [                'js' => '/bitrix/js/jscolor.forBitrix/jscolor.min.js'            ],            'jscolor_install' => [                'js' => '/bitrix/js/jscolor.forBitrix/jscolor_install.js'            ],        ];        foreach ($arJsConfig as $ext => $arExt) {            \CJSCore::RegisterExt($ext, $arExt);        }    }    /**     * Перевод из hex в RGB     * @param $color - hex-код цвета     * @return array|bool - RGB     */    protected function hexToRgb($color)    {        // проверяем наличие # в начале, если есть, то отрезаем ее        if ($color[0] == '#') {            $color = substr($color, 1);        }        // разбираем строку на массив        if (strlen($color) == 6) {            list($red, $green, $blue) = [                $color[0] . $color[1],                $color[2] . $color[3],                $color[4] . $color[5]            ];        } else {            return false;        }        // переводим шестнадцатиричные числа в десятичные        $red = hexdec($red);        $green = hexdec($green);        $blue = hexdec($blue);        return [$red, $green, $blue];    }    /**     * Получение цвета     * @param $arProperty array - настройки свойства     * @param $value string - текущее значение     * @return string hex-код цвета     */    protected function getColor($arProperty, $value)    {        if (empty($value) && $arProperty['USER_TYPE_SETTINGS']['USE_DEFAULT_VALUE'] == 'Y') {            $color = $arProperty['DEFAULT_VALUE'];        } else {            return $value;        }        return $color;    }    /**     * Получение html инпута для редактирования свойства     * @param $arProperty array - настройки свойства     * @param $name string - атрбиут name     * @param $value  string - значение свойства     * @return string HTML     */    function getEditHTML($arProperty, $name, $value)    {        if (empty($value)) {            $value = static::getColor($arProperty, $value);        }        $html = '<input class="jscolor" type="text" data-jscolor="{required:false, hash:true, zIndex: 1100, closable:true, closeText:\'X\'}"  name="' . $name . '" value="' . $value . '">';        return $html;    }    /**     * Получение отображения значения свойства     * @param $arProperty array - настройки свойства     * @param $value string - значение свойства     * @return string HTML     */    function getViewHTML($arProperty, $value)    {        if (empty($value)) {            $value = static::getColor($arProperty, $value);        }        $rgb = static::hexToRgb($value);        $isLight = (0.213 * $rgb[0] + 0.715 * $rgb[1] + 0.072 * $rgb[2]) > (255 / 2);        $textColor = $isLight ? '#000000' : '#FFFFFF';        return '        <div style="background-color:' . $value . '; width: 50px; height: 30px; line-height: 30px; text-align: center; ">            <span style="vertical-align: middle; color:' . $textColor . '; font-size: 10px; font-family: segoe ui;">' . $value . '</span>        </div>';    }    /**     * Получение поля редактирования свойства на странице редактирования пользовательского свойства     * @param array $arProperty - настройки свойства     * @param array $value - значение свойства     * @return string HTML     */    function getAdminListEditHTML($arProperty, $value)    {        return static::getEditHTML($arProperty, $value['NAME'], $value['VALUE']);    }    /**     * Получение отображения значения свойства в списке в главном модуле     * @param $arProperty array - настройки свойства     * @param $value string - значение свойства     * @return string HTML     */    function getAdminListViewHTML($arProperty, $value)    {        return static::getViewHTML($arProperty, $value['VALUE']);    }    /**     * Получение поля редактирования свойства на странице редактирования пользовательского свойства     * @param array $arProperty - настройки свойства     * @param array $value - значение свойства     * @return string HTML     */    function getEditFormHTML($arProperty, $value)    {        return static::getEditHTML($arProperty, $value['NAME'], $value['VALUE']);    }    /**     * Получение поля редактирования свойства на странице редактирования элемента     * @param $arProperty array - настройки свойства     * @param $value string - значение свойства     * @param $htmlControlName string - атрибут name     * @return string HTML     */    function getPropertyFieldHtml($arProperty, $value, $htmlControlName)    {        return static::getEditHTML($arProperty, $htmlControlName['VALUE'], $value['VALUE']);    }    /**     * Получение HTML для фильтра по свойству в модуле ИБ     * @param array $arProperty - настройки свойства     * @param array $htmlControlName     * @return string HTML     */    function getAdminFilterHTML($arProperty, $htmlControlName)    {        $html = '<div style="margin-left: 12px;">';        $html .= static::getEditHTML($arProperty, $htmlControlName['VALUE'], '');        $html .= '</div>';        return $html;    }    /**     * Получение HTML для фильтра по свойству в главном модуле     * @param array $arProperty - настройки свойства     * @param array $htmlControlName     * @return string HTML     */    function getFilterHTML($arProperty, $htmlControlName)    {        $html = '<div style="margin-left: 12px;">';        $html .= static::getEditHTML($arProperty, $htmlControlName['NAME'], '');        $html .= '</div>';        return $html;    }    /**     * Подготовка настроек     * @param array $arProperty     * @return array изменённые значения     */    function prepareSettings($arProperty)    {        if (is_array($arProperty["USER_TYPE_SETTINGS"]) && $arProperty["USER_TYPE_SETTINGS"]["USE_DEFAULT_VALUE"] === "Y") {            $useDefaultValue = "Y";        } else {            $useDefaultValue = "N";        }        return [            'USE_DEFAULT_VALUE' => $useDefaultValue        ];    }    /**     * Получение настроек     * @param array $arProperty - настройки свойства     * @param array $htmlControlName - атрибут name     * @param $arPropertyFields array - поля для настройки     * @return string HTML     */    function getSettingsHTML($arProperty, $htmlControlName, &$arPropertyFields)    {        $settings = static::PrepareSettings($arProperty);        $arPropertyFields = [            'HIDE' => ['ROW_COUNT', 'COL_COUNT']        ];        return '            <tr valign="top">                <td>'.Loc::getMessage('CUSTOM_PROPERTY_COLOR:USE_DEFAULT_VALUE').'</td>                <td><input type="checkbox" name="' . $htmlControlName["NAME"] . '[USE_DEFAULT_VALUE]" value="Y" ' . ($settings["USE_DEFAULT_VALUE"] == "Y" ? 'checked' : '') . '></td>		    </tr>		';    }    /**     * Запись в БД     * @param $arProperty     * @param $value     * @return     */    function convertToDB($arProperty, $value)    {        return $value;    }    /**     * Получение из БД     * @param $arProperty     * @param $value     * @return     */    function convertFromDB($arProperty, $value)    {        return $value;    }}